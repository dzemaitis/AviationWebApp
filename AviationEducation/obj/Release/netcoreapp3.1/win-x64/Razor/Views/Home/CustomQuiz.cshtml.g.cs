#pragma checksum "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\Home\CustomQuiz.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6a0d82c356f012d9d0a6029da5274148d74dcf4c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_CustomQuiz), @"mvc.1.0.view", @"/Views/Home/CustomQuiz.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\_ViewImports.cshtml"
using AviationEducation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\_ViewImports.cshtml"
using AviationEducation.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6a0d82c356f012d9d0a6029da5274148d74dcf4c", @"/Views/Home/CustomQuiz.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"33f8f5778aac038f510785c657470f8b1a17bbf6", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_CustomQuiz : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Question>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("categories"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-capitalize"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\Home\CustomQuiz.cshtml"
  
    ViewData["Title"] = "Custom Quiz";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 8 "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\Home\CustomQuiz.cshtml"
  
    //Make first question random from the Model from controller.
    Random rnd = new Random();
    int r = rnd.Next(Model.Count);
    Question currentQuestion = Model.ElementAt(r);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Welcome</h1>\r\n    <p>Pick your quiz module. You can also make API request to get all question list</p>\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6a0d82c356f012d9d0a6029da5274148d74dcf4c4819", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <input type=""button"" id=""start_button"" class=""btn btn-warning"" onclick=""Start(this)"" value=""Start Quiz"" />
    <div id=""quiz_div"" style=""display: none"">
        <p id=""question_text"" class=""lead font-weight-bold""></p>
        <p id=""option1"" onclick=""Option_clicked(this)""></p>
        <p id=""option2"" onclick=""Option_clicked(this)""></p>
        <p id=""option3"" onclick=""Option_clicked(this)""></p>
        <p id=""explanation"" class=""text-warning""></p>
        <input type=""button"" id=""next_question_button"" class=""btn btn-warning"" onclick=""NextQuestion()"" value=""Next question"" />
        <p id=""score"" class=""mt-2"">Score: 0/0</p>
    </div>
    <div class=""codebox bg-secondary"">
        <code class=""text-light"">
            <span>Web Api usage examples:</span><br />
            <span>Get full data in json format:</span><br />
            curl -get https://localhost:44381/api/json/<br />
            <span>Get question by id:</span><br />
            <span>/api/json/question/{id}</span><br />
  ");
            WriteLiteral(@"          curl -get https://localhost:44381/api/json/question/5433 <br />
            <span>Get question by category:</span><br />
            /api/json/category/{category_name}<br />
            curl -get https://localhost:44381/api/json/category/arithmetics <br />
            <span>Get question by module:</span><br />
            /api/json/module/{module_name}<br />
            curl -get https://localhost:44381/api/json/module/mathematics <br />
        </code>
    </div>
</div>




");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n        <script type=\"text/javascript\">\r\n\r\n        //All questions from model\r\n        var questions = ");
#nullable restore
#line 56 "C:\Users\Dellas\source\repos\AviationEducation\AviationEducation\Views\Home\CustomQuiz.cshtml"
                   Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

        //ALl modules
        var modules = []
        for (let i of questions) {
            if (!modules.includes(i['module'])) {
                modules.push(i['module'])
            }
        }
        // Create HTML radio buttons from available modules
        var questionHtml = """"
            for (let i of modules) {
                var input = document.createElement(""input"");
                input.type = ""radio""
                input.name = ""module""
                input.innerHTML = i
                input.value = i
                questionHtml += input.outerHTML + "" "" + i + ""<br>""
            }
            document.getElementById(""categories"").innerHTML = ""<p>Please select the module you wish to learn:</p>"" + questionHtml
        //Main variables and manipulated HTML elements
        var score = 0
        var total_questions_answered = 0
        var current_question
        var question_el = document.getElementById('question_text')
        var option1_el = document.getEleme");
                WriteLiteral(@"ntById('option1')
        var option2_el = document.getElementById('option2')
        var option3_el = document.getElementById('option3')
        var next_button_el = document.getElementById('next_question_button')
        var explanation_el = document.getElementById('explanation')

        //User selected custom quiz objects
        var selected_questions = [] //questions list for custom quiz
        var module_selector = document.querySelector('input[name=""module""]:checked')

        // ********************** Start button *********************

        function Start(button) {
            //Add selected questions to list
            module_selector = document.querySelector('input[name=""module""]:checked')
            if (module_selector == null) {
                alert(""Pick a module"")
            }
            else {
                selected_module = module_selector.value;

                for (let i of questions) {
                    if (i['module'] == selected_module) {
           ");
                WriteLiteral(@"             selected_questions.push(i)
                    }
                }
                //Hide and appear needed HTML
                document.getElementById('quiz_div').style.display = ""inline"";
                button.style.display = ""none"";
                document.getElementById(""categories"").style.display = ""none""
                next_button_el.disabled = true;
                //Pick randonm question from selected_questions and put it into HTML
                current_question = selected_questions[Math.floor(Math.random() * selected_questions.length)];
                question_el.innerHTML = current_question['question_Text']
                option1_el.innerHTML = current_question['option1']
                option2_el.innerHTML = current_question['option2']
                option3_el.innerHTML = current_question['option3']
                //Re-start needed styles
                explanation_el.innerHTML = """";
                for (let i of [option1_el, option2_el, option3_el]) {
   ");
                WriteLiteral(@"                 i.style.background = """";
                    i.style.cursor = ""pointer"";
                    i.style.pointerEvents = ""auto"";
                }
                //Display score
                document.getElementById('score').innerHTML = ""Score: "" + score + "" /"" + total_questions_answered
            }
        }

        //********************** Option click event *********************

            function Option_clicked(object) {
            next_button_el.disabled = false
            total_questions_answered += 1
            //Check if clicked option is correct 
            if (object.innerHTML == current_question['answer']) {
                score += 1
                object.style.background = ""#009933"";
            }
            else {
                for (let i of [option1_el, option2_el, option3_el]) {
                    if (i.innerHTML == current_question.answer) {
                        i.style.background = ""#009933"";
                    }
                }
 ");
                WriteLiteral(@"           }
            for (let i of [option1_el, option2_el, option3_el]) {
                i.style.cursor = ""default"";
                i.style.pointerEvents = ""none"";
            }
            //Update score and add explanation HTML
            document.getElementById('score').innerHTML = ""Score: "" + score + "" /"" + total_questions_answered
            explanation_el.innerHTML = ""Explanation: "" + current_question['explanation']
            explanation_el.style.display = ""block"";
            //If it's last question buton text is Finish
            if (total_questions_answered == 10) {
                next_button_el.value = ""Finish""
            }
        }

        //********************** Next Question button *********************

        function NextQuestion()
        {
            next_button_el.disabled = true;
            explanation_el.style.display = ""none"";
            //Restart html styles for questions
            for (let i of [option1_el, option2_el, option3_el]) {
      ");
                WriteLiteral(@"          i.style.background = """";
                i.style.pointerEvents = ""auto"";
                i.style.cursor = ""pointer"";
            }
            //Pick new random question and update HTML
            current_question = selected_questions[Math.floor(Math.random() * selected_questions.length)];
            question_el.innerHTML = current_question['question_Text']
            option1_el.innerHTML = current_question['option1']
            option2_el.innerHTML = current_question['option2']
            option3_el.innerHTML = current_question['option3']

            if (total_questions_answered == 10) {
                //restart data 
                score = 0
                total_questions_answered = 0
                //hide/appear needed HTML
                document.getElementById('quiz_div').style.display = ""none"";
                document.getElementById('start_button').style.display = ""inline"";
                document.getElementById(""categories"").reset();
                document.ge");
                WriteLiteral("tElementById(\"categories\").style.display = \"inline\";\r\n            }\r\n        }\r\n        </script>\r\n\r\n");
            }
            );
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Question>> Html { get; private set; }
    }
}
#pragma warning restore 1591
